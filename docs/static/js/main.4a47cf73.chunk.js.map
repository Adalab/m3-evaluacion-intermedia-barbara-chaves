{"version":3,"sources":["components/ PokeList.js","components/Pokemon.js","components/App.js","data/data.js","serviceWorker.js","index.js"],"names":["PokeList","props","className","children","Pokemon","image","id","name","types","cardClass","onclick","onClick","src","alt","map","type","index","key","App","getPokemonList","fetch","then","response","json","data","pokemon","url","pokemonList","setState","handleClick","event","clickedPokemon","currentTarget","state","favoritesList","includes","filter","item","bind","this","toString","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uTAWeA,G,YARE,SAAAC,GACf,OACE,wBAAIC,UAAU,aACXD,EAAME,YCiBEC,G,MApBC,SAAAH,GAAU,IAChBI,EAA+CJ,EAA/CI,MAAOC,EAAwCL,EAAxCK,GAAIC,EAAoCN,EAApCM,KAAMC,EAA8BP,EAA9BO,MAAOC,EAAuBR,EAAvBQ,UAAWC,EAAYT,EAAZS,QAE3C,OACE,yBAAKR,UAAW,WAAaO,EAAWH,GAAIA,EAAIK,QAASD,GACvD,yBAAKR,UAAU,kBACb,yBAAKA,UAAU,sBAAsBU,IAAKP,EAAOQ,IAAKN,KAExD,wBAAIL,UAAU,kBACXM,EAAMM,KAAI,SAACC,EAAMC,GAAP,OACT,wBAAIC,IAAKD,EAAOd,UAAU,wBACvBa,OAIP,wBAAIb,UAAU,iBAAiBK,M,ICgEtBW,E,YA3Eb,aAAe,IAAD,8BACZ,+CAYFC,eAAiB,WClBVC,MAAM,eACRC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIA,EAAKV,KAAI,SAAAW,GACrB,MAAO,CACLnB,GAAImB,EAAQnB,GACZD,MAAOoB,EAAQC,IACfnB,KAAMkB,EAAQlB,KACdC,MAAOiB,EAAQjB,aDYFa,MAAK,SAAAM,GAAW,OAAI,EAAKC,SAAS,CAAED,oBAd3C,EAiBdE,YAAc,SAAAC,GACZ,IAAMC,EAAiBD,EAAME,cAAc1B,GAC3C,EAAKsB,UAAS,SAAAK,GACZ,OACGA,EAAMC,cAAcC,SAASJ,GAI5B,CAACG,cAAc,YACZD,EAAMC,cAAcE,QAAO,SAAAC,GAAI,OAAIA,IAASN,OAJ/C,CAACG,cAAc,GAAD,mBACXD,EAAMC,eADK,CACUH,SApB9B,EAAKE,MAAQ,CACXN,YAAa,GACbO,cAAe,IAGjB,EAAKf,iBAEL,EAAKU,YAAc,EAAKA,YAAYS,KAAjB,gBAVP,E,sEAgCJ,IAEmBX,EAAaO,EAFjC,OAgCP,OACE,yBAAKhC,UAAU,OACb,wBAAIA,UAAU,cAAd,oBACA,kBAAC,EAAD,MAjCuByB,EAkCFY,KAAKN,MAAMN,YAlCIO,EAkCSK,KAAKN,MAAMC,cAjCnDP,EAAYb,KAAI,SAAAW,GAAY,IAE/BnB,EAIEmB,EAJFnB,GACAC,EAGEkB,EAHFlB,KACAF,EAEEoB,EAFFpB,MACAG,EACEiB,EADFjB,MASF,OACE,wBAAIS,IAAKX,GACP,kBAAC,EAAD,CACEA,GAAIA,EACJG,UATGyB,EAAcC,SAAS7B,EAAGkC,YAC/B,WACA,GAQE9B,QAAS,EAAKmB,YACdxB,MAAOA,EACPE,KAAMA,EACNC,MAAOA,e,GA1DHiC,IAAMC,WEMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.4a47cf73.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../stylesheets/poke-list.css\";\n\nconst PokeList = props => {\n  return (\n    <ul className=\"poke-list\">\n      {props.children}\n    </ul>\n  );\n};\n\nexport default PokeList;\n","import React from \"react\";\nimport \"../stylesheets/pokemon.css\";\n\nconst Pokemon = props => {\n  const { image, id, name, types, cardClass, onclick } = props;\n\n  return (\n    <div className={\"pokemon \" + cardClass} id={id} onClick={onclick}>\n      <div className=\"pokemon__image\">\n        <img className=\"pokemon__image__img\" src={image} alt={name} />\n      </div>\n      <ul className=\"pokemon__types\">\n        {types.map((type, index) => (\n          <li key={index} className=\"pokemon__types__type\">\n            {type}\n          </li>\n        ))}\n      </ul>\n      <h2 className=\"pokemon__name\">{name}</h2>\n    </div>\n  );\n};\n\nexport default Pokemon;\n","import React from \"react\";\nimport \"../stylesheets/app.css\";\nimport PokeList from \"./ PokeList\";\nimport Pokemon from \"./Pokemon\";\nimport { getAndFormatData } from \"../data/data\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      pokemonList: [],\n      favoritesList: []\n    };\n\n    this.getPokemonList();\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  getPokemonList = () => {\n    getAndFormatData().then(pokemonList => this.setState({ pokemonList }));\n  };\n\n  handleClick = event => {\n    const clickedPokemon = event.currentTarget.id;\n    this.setState(state => {\n      return (\n        !state.favoritesList.includes(clickedPokemon)\n        ? {favoritesList: [\n          ...state.favoritesList, clickedPokemon\n        ]}\n        : {favoritesList: [\n          ...state.favoritesList.filter(item => item !== clickedPokemon)\n        ]}\n      )\n    })\n  }\n\n  render() {\n\n    const CreatePokemonList = (pokemonList, favoritesList) => {\n      return pokemonList.map(pokemon => {\n        const {\n          id,\n          name,\n          image,\n          types,\n        } = pokemon;\n        \n        const changeCardClass = () => {\n          return favoritesList.includes(id.toString())\n          ? 'favorite'\n          : ''\n        }\n\n        return (\n          <li key={id} >\n            <Pokemon\n              id={id}\n              cardClass={changeCardClass()} \n              onclick={this.handleClick}\n              image={image}\n              name={name}\n              types={types}\n            />\n          </li>\n        );\n      });\n    };\n\n    return (\n      <div className=\"app\">\n        <h1 className=\"app__title\">Mi lista Pokemon</h1>\n        <PokeList>\n          {CreatePokemonList(this.state.pokemonList, this.state.favoritesList)}\n        </PokeList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","\nfunction getAndFormatData(){\n  return fetch('./data.json')\n      .then(response => response.json())\n      .then(data => data.map(pokemon => {\n        return {\n          id: pokemon.id,\n          image: pokemon.url,\n          name: pokemon.name,\n          types: pokemon.types\n        }\n      }))\n  \n}\n\nexport { getAndFormatData }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}